name: Neural Detective CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Node.js dependencies
      run: |
        npm install -g http-server
        
    - name: Test web interface
      run: |
        # Start local server in background
        http-server . -p 8080 &
        sleep 5
        
        # Test that root page loads (GitHub Pages entry)
        curl -f http://localhost:8080/index.html
        
        # Test that main page loads
        curl -f http://localhost:8080/src/index.html
        
        # Test that all static files are accessible
        curl -f http://localhost:8080/public/css/styles.css
        curl -f http://localhost:8080/public/js/neuron-simulator.js
        curl -f http://localhost:8080/public/js/treatment-lab.js
        
        # Test that data files are accessible
        curl -f http://localhost:8080/data/case_a.json
        curl -f http://localhost:8080/data/case_b.json
        curl -f http://localhost:8080/data/case_c.json
        curl -f http://localhost:8080/data/case_d.json
        curl -f http://localhost:8080/data/case_normal.json
        
    - name: Validate JSON files
      run: |
        # Check that all case files are valid JSON
        python -m json.tool data/case_a.json > /dev/null
        python -m json.tool data/case_b.json > /dev/null
        python -m json.tool data/case_c.json > /dev/null
        python -m json.tool data/case_d.json > /dev/null
        python -m json.tool data/case_normal.json > /dev/null
        echo "All JSON files are valid"
        
    - name: Check documentation
      run: |
        # Verify that key documentation files exist and are non-empty
        test -s README.md
        test -s LICENSE
        echo "Documentation files verified"

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install JavaScript linting
      run: |
        npm install -g jshint
        
    - name: Lint JavaScript code
      run: |
        # Check JavaScript syntax
        jshint public/js/neuron-simulator.js || echo "JSHint warnings in neuron-simulator.js (non-blocking)"
        jshint public/js/treatment-lab.js || echo "JSHint warnings in treatment-lab.js (non-blocking)"

  deploy:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        
    - name: Create Release Archive
      run: |
        # Create a deployment archive
        tar -czf neural-detective-release.tar.gz \
          index.html src/ public/ data/ \
          README.md LICENSE
          
    - name: Upload Release Artifact
      uses: actions/upload-artifact@v4
      with:
        name: neural-detective-release
        path: neural-detective-release.tar.gz
        retention-days: 30

  accessibility-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install accessibility testing tools
      run: |
        npm install -g @axe-core/cli http-server
        
    - name: Start server and test accessibility
      run: |
        # Start local server
        http-server . -p 8080 &
        sleep 5
        
        # Run accessibility tests
        axe http://localhost:8080/src/index.html --tags wcag2a,wcag2aa || echo "Accessibility test completed (non-blocking)"
        
  performance-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install performance testing tools
      run: |
        npm install -g lighthouse http-server
        
    - name: Run Lighthouse performance test
      run: |
        # Start local server
        http-server . -p 8080 &
        sleep 5
        
        # Run Lighthouse audit (non-blocking)
        lighthouse http://localhost:8080/src/index.html \
          --output json \
          --output-path ./lighthouse-report.json \
          --chrome-flags="--headless --no-sandbox" \
          --only-categories=performance,accessibility,best-practices || echo "Lighthouse test completed"
          
    - name: Upload Lighthouse Report
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-report
        path: lighthouse-report.json
        retention-days: 7
      if: always()

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Check for sensitive data
      run: |
        # Look for potentially sensitive information in files
        echo "Checking for sensitive data patterns..."
        
        # Check for hardcoded secrets (basic patterns, excluding legitimate uses)
        if grep -r -i "password\|secret\|token" --include="*.js" --include="*.json" . | grep -v "README\|example\|template\|demo\|description\|comment"; then
          echo "Warning: Potential secrets found in code"
          exit 1
        fi
        
        echo "No obvious sensitive data patterns found"
