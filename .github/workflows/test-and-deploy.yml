name: Neural Detective CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install matplotlib numpy pytest
        
    - name: Test Python simulator
      run: |
        cd scripts
        python action_potential_simulator.py --case "Normal" --steps 10
        python action_potential_simulator.py --all --steps 10
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Node.js dependencies
      run: |
        npm install -g http-server
        
    - name: Test web interface
      run: |
        # Start local server in background
        http-server . -p 8080 &
        sleep 5
        
        # Test that main page loads
        curl -f http://localhost:8080/src/index.html
        
        # Test that all static files are accessible
        curl -f http://localhost:8080/public/css/styles.css
        curl -f http://localhost:8080/public/js/neuron-simulator.js
        curl -f http://localhost:8080/public/js/app.js
        
        # Test that data files are accessible
        curl -f http://localhost:8080/data/case_a.json
        curl -f http://localhost:8080/data/case_b.json
        curl -f http://localhost:8080/data/case_c.json
        curl -f http://localhost:8080/data/case_d.json
        curl -f http://localhost:8080/data/case_normal.json
        
    - name: Validate JSON files
      run: |
        # Check that all case files are valid JSON
        python -m json.tool data/case_a.json
        python -m json.tool data/case_b.json
        python -m json.tool data/case_c.json
        python -m json.tool data/case_d.json
        python -m json.tool data/case_normal.json
        
    - name: Check documentation
      run: |
        # Verify that key documentation files exist and are non-empty
        test -s README.md
        test -s STUDENT_HANDOUT.md
        test -s TEACHER_GUIDE.md
        test -s ActionPotential.md

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        
    - name: Lint Python code
      run: |
        # Check Python syntax and style
        flake8 scripts/ --max-line-length=100 --ignore=E501,W503
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install JavaScript linting
      run: |
        npm install -g jshint
        
    - name: Lint JavaScript code
      run: |
        # Check JavaScript syntax
        jshint public/js/neuron-simulator.js
        jshint public/js/app.js

  deploy:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        destination_dir: neural-detective
        
    - name: Create Release Archive
      run: |
        # Create a deployment archive
        tar -czf neural-detective-release.tar.gz \
          src/ public/ data/ scripts/ \
          *.md ActionPotential.md
          
    - name: Upload Release Artifact
      uses: actions/upload-artifact@v3
      with:
        name: neural-detective-release
        path: neural-detective-release.tar.gz
        retention-days: 30

  accessibility-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install accessibility testing tools
      run: |
        npm install -g @axe-core/cli http-server
        
    - name: Start server and test accessibility
      run: |
        # Start local server
        http-server . -p 8080 &
        sleep 5
        
        # Run accessibility tests
        axe http://localhost:8080/src/index.html --tags wcag2a,wcag2aa || true
        
  performance-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install performance testing tools
      run: |
        npm install -g lighthouse http-server
        
    - name: Run Lighthouse performance test
      run: |
        # Start local server
        http-server . -p 8080 &
        sleep 5
        
        # Run Lighthouse audit
        lighthouse http://localhost:8080/src/index.html \
          --output json \
          --output-path ./lighthouse-report.json \
          --chrome-flags="--headless --no-sandbox" \
          --only-categories=performance,accessibility,best-practices || true
          
    - name: Upload Lighthouse Report
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-report
        path: lighthouse-report.json
        retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan.sarif'
      continue-on-error: true
      
    - name: Check for sensitive data
      run: |
        # Look for potentially sensitive information in files
        echo "Checking for sensitive data patterns..."
        
        # Check for hardcoded secrets (basic patterns)
        if grep -r -i "password\|secret\|token\|key" --include="*.js" --include="*.py" --include="*.json" . | grep -v "README\|GUIDE\|example"; then
          echo "Warning: Potential secrets found in code"
          exit 1
        fi
        
        echo "No obvious sensitive data patterns found"